<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepage on Scientific Programming</title>
    <link>https://scientific-programming.github.io/</link>
    <description>Recent content in Homepage on Scientific Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 25 Oct 2018 17:49:03 +0100</lastBuildDate>
    
	<atom:link href="https://scientific-programming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up the Software</title>
      <link>https://scientific-programming.github.io/containers/tutorial1/</link>
      <pubDate>Fri, 26 Oct 2018 09:41:56 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/containers/tutorial1/</guid>
      <description>    For all of the following tutorials, we will use Docker as the container software of choice. How to install Docker varies quite a lot between different operating systems.
Please follow the instructions relevant to you:
Linux </description>
    </item>
    
    <item>
      <title>Getting Started with Docker</title>
      <link>https://scientific-programming.github.io/containers/tutorial2/</link>
      <pubDate>Fri, 26 Oct 2018 09:41:56 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/containers/tutorial2/</guid>
      <description>First Steps 1) Make an account on the website https://hub.docker.com
Make the username something sensible as we&amp;rsquo;ll have to use it soon!
1) If you haven&amp;rsquo;t already, try &amp;ldquo;docker run ubuntu:18.04&amp;rdquo;. This downloads an image containing Ubuntu 18.04.
2) Now, we&amp;rsquo;ll create a file called &amp;ldquo;Dockerfile&amp;rdquo; in a single folder. The Dockerfile is a configuration script for building an image.
 Create a directory by doing:  mkdir docker-tutorial  Change directory into the folder:  cd docker-tutorial 3) Create a file called Dockerfile in this directory, and put as the first line:</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://scientific-programming.github.io/version-control/tutorial1/</link>
      <pubDate>Thu, 25 Oct 2018 17:49:03 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/version-control/tutorial1/</guid>
      <description>Getting Started with Version Control 1) Open your terminal, or Git Bash.
2) Set your name and username with Git. This labels modifications to files you do and associates them with you!
git config --global user.name &amp;#34;Ryan Pepper&amp;#34; git config --global user.email &amp;#34;ryan.pepper@soton.ac.uk&amp;#34; 3) Set your favourite text editor by running the appropriate command below:
# Atom git config --global core.editor &amp;#34;atom --wait&amp;#34; # nano git config --global core.editor &amp;#34;nano -w&amp;#34; # Sublime Text (Mac) git config --global core.</description>
    </item>
    
    <item>
      <title>GitHub and Collaborating</title>
      <link>https://scientific-programming.github.io/version-control/tutorial2/</link>
      <pubDate>Thu, 25 Oct 2018 17:49:03 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/version-control/tutorial2/</guid>
      <description>Storing your repository somewhere safe You have a history of your changes locally, but that&amp;rsquo;s not much good if your hard drive fails. We&amp;rsquo;ll now show you how keep a history remotely.
Git is known as a &amp;lsquo;distributed version control&amp;rsquo; system. Generally, you host a repository somewhere online. There are lots of different providers for this.
 GitHub - free! Lots of integrations with other services. Limited number or private repositories, but you can send off proof of academic status to get an unlimited number.</description>
    </item>
    
    <item>
      <title>Discarding Temporary Changes</title>
      <link>https://scientific-programming.github.io/version-control/tutorial3/</link>
      <pubDate>Thu, 25 Oct 2018 17:49:03 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/version-control/tutorial3/</guid>
      <description>Discarding channges 1) If you make some changes to the file workshop.txt, but then decide that they weren&amp;rsquo;t correct or were unnecessary, you can easily get back to the head of the branch with the following command:
git reset HEAD workshop.txt This permanently discards these changes.
2) Alternatively, if you want to hide the changes now, but might come back to them, you can use:
git stash  This creates a list of changes which are stored, but not committed, and which you can recover later.</description>
    </item>
    
  </channel>
</rss>