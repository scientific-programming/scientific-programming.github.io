<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scientific Programming</title>
    <link>https://scientific-programming.github.io/</link>
    <description>Recent content on Scientific Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 26 Oct 2018 10:56:09 +0100</lastBuildDate>
    
	<atom:link href="https://scientific-programming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Writing Simple Tests</title>
      <link>https://scientific-programming.github.io/testing/simple-tests/</link>
      <pubDate>Fri, 26 Oct 2018 10:56:09 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/testing/simple-tests/</guid>
      <description>Starting off simply: Squaring a number Consider as a really simple example, a function which takes a number and computes the square of that number.
def square(x): return x * x Various appropriate tests of this could check:
 Is the correct answer given for positive integers? Is the correct answer given for negative integers? Is the correct answer given for zero? Is the correct answer given for positive and negative decimals?</description>
    </item>
    
    <item>
      <title>Writing Complex Tests</title>
      <link>https://scientific-programming.github.io/testing/complex-tests/</link>
      <pubDate>Fri, 26 Oct 2018 10:56:09 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/testing/complex-tests/</guid>
      <description>Principles of Software Testing What are the main principles of software testing? Generally, people don&amp;rsquo;t start out writing software with no idea what it should do - they should have some idea of the requirements. The written software must then:
 Meet the original requirements Must respond correctly to different inputs Software must run in a reasonable amount of time Can be installed and run in the intended environment  Static vs Dynamic Testing [Static Testing]{}</description>
    </item>
    
    <item>
      <title>Getting Started with Docker</title>
      <link>https://scientific-programming.github.io/containers/tutorial/</link>
      <pubDate>Fri, 26 Oct 2018 09:41:56 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/containers/tutorial/</guid>
      <description>First Steps 1) Make an account on the website https://hub.docker.com
Make the username something sensible as we&amp;rsquo;ll have to use it soon!
1) If you haven&amp;rsquo;t already, try &amp;ldquo;docker run ubuntu:18.04&amp;rdquo;. This downloads an image containing Ubuntu 18.04.
2) Now, we&amp;rsquo;ll create a file called &amp;ldquo;Dockerfile&amp;rdquo; in a single folder. The Dockerfile is a configuration script for building an image.
 Create a directory by doing:  mkdir docker-tutorial  Change directory into the folder:  cd docker-tutorial 3) Create a file called Dockerfile in this directory, and put as the first line:</description>
    </item>
    
    <item>
      <title>Command Cheatsheet</title>
      <link>https://scientific-programming.github.io/cheatsheet/</link>
      <pubDate>Fri, 26 Oct 2018 09:41:56 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/cheatsheet/</guid>
      <description>The following is a list of standard commands in cmd on Windows or Bash on *nix systems. It&amp;rsquo;s by no means a comprehensive list - these are just to help you
Sometimes the commands I&amp;rsquo;ll show (which are used for navigating around on Linux or Unix based systems like Macs) don&amp;rsquo;t work in Windows. So here, I&amp;rsquo;ve put a list of things you might want to do, and the commands in both Windows and Linux.</description>
    </item>
    
    <item>
      <title>Generating Docs</title>
      <link>https://scientific-programming.github.io/documentation/generating-docs/</link>
      <pubDate>Fri, 26 Oct 2018 22:07:04 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/documentation/generating-docs/</guid>
      <description>How can we generate documentation from code? There are a number of different tools for automatically generating documentation for different languages. For Python, a common tool is Sphinx. For projects which combine several languages, sometimes the tool Doxygen is preferred.
Here, we&amp;rsquo;ll focus on Sphinx, but generally all tools work by similar principles; the source code of a library is parsed, and the author of code annotates it in order to provide the documentation.</description>
    </item>
    
    <item>
      <title>Generating documentation with Sphinx</title>
      <link>https://scientific-programming.github.io/documentation/generating-sphinx/</link>
      <pubDate>Fri, 26 Oct 2018 22:07:04 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/documentation/generating-sphinx/</guid>
      <description>Quick Notes  Pip install sphinx rather than through apt-get because otherwise TZ settings do not work well  fromubuntu:18.04RUN apt-get update &amp;amp;&amp;amp; apt-get install python3 python3-pipRUN pip3 installWORKDIR/app Then
docker build . -t documentation docker run -v `pwd`:/app -it documentation sphinx-quickstart  Most defaults are OK but:
 We want to set default document to markdown rather than RST We want to enable MathJax  Now Edit conf.py:</description>
    </item>
    
    <item>
      <title>Continuous Integration</title>
      <link>https://scientific-programming.github.io/testing/continuous-integration/</link>
      <pubDate>Fri, 26 Oct 2018 10:56:15 +0100</pubDate>
      
      <guid>https://scientific-programming.github.io/testing/continuous-integration/</guid>
      <description>Continuous Integration What is Continuous Integration?
 Runs the tests repeatedly, every time you make a change. You use a remote service, to avoid having to run all tests locally - useful if they take some time to run. Generally, CI services send you angry emails when tests fail! It requires you to be using version control, and all tests are run when you push your changes to the remote repository.</description>
    </item>
    
  </channel>
</rss>